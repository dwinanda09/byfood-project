basePath: /
definitions:
  entities.Book:
    properties:
      author:
        type: string
        description: Author of the book
        example: "Alan Donovan, Brian Kernighan"
      created_at:
        type: string
        format: date-time
        description: When the book record was created
        example: "2024-08-07T10:30:00Z"
      id:
        type: string
        format: uuid
        description: Unique identifier for the book
        example: "123e4567-e89b-12d3-a456-426614174000"
      title:
        type: string
        description: Title of the book
        example: "The Go Programming Language"
      updated_at:
        type: string
        format: date-time
        description: When the book record was last updated
        example: "2024-08-07T10:30:00Z"
      year:
        type: integer
        description: Publication year
        example: 2015
        minimum: 1000
        maximum: 2034
    type: object
  entities.CreateBookDTO:
    properties:
      author:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  entities.UpdateBookDTO:
    properties:
      author:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: byFood Development Team
    email: dev@byfood.com
  description: A comprehensive library management system built with Clean Architecture, Echo framework, and UUID support. Provides full CRUD operations for book management with persistent storage and request tracing.
  title: byFood Library Management System API
  version: "1.0.0"
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get all books from the library with UUID and timestamps
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with title, author, and year
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entities.CreateBookDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a single book by its UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      - description: Book data to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entities.UpdateBookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a book
      tags:
      - books
swagger: "2.0"