basePath: /
definitions:
  entities.Book:
    properties:
      author:
        type: string
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      year:
        type: integer
    type: object
  entities.CreateBookDTO:
    properties:
      author:
        type: string
      title:
        type: string
      year:
        maximum: 2034
        minimum: 1000
        type: integer
    required:
    - author
    - title
    - year
    type: object
  entities.UpdateBookDTO:
    properties:
      author:
        type: string
      title:
        type: string
      year:
        maximum: 2034
        minimum: 1000
        type: integer
    required:
    - author
    - title
    - year
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  handlers.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A simple book library management API with UUID support and Echo framework
  title: Book Library API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get all books from the library with UUID and timestamps
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book with title, author, and year
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entities.CreateBookDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a book
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Get a single book by its UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book by UUID
      parameters:
      - description: Book UUID
        in: path
        name: id
        required: true
        type: string
      - description: Book data to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/entities.UpdateBookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /process-url:
    post:
      consumes:
      - application/json
      description: Process a URL for various operations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Process URL
      tags:
      - utils
swagger: "2.0"
